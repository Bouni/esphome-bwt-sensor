---
esphome:
  name: bwt 
  platform: ESP32
  board: mhetesp32minikit

# WiFi connection
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: BWT-Hotspot
    password: hotspotpw

captive_portal:

# Enable logging
logger:

# Enable Home Assistant API
api:

# Enable over-the-air updates
ota:

# Enable Web server
web_server:
  port: 80

i2c:
  sda: 21
  scl: 22
  scan: true
  id: i2cbus

sensor:
  - platform: tcs34725
    red_channel:
      id: bwt_red
      name: "BWT Red"
    green_channel:
      id: bwt_green
      name: "BWT Green"
    blue_channel:
      id: bwt_blue
      name: "BWT Blue"
    clear_channel:
      id: bwt_clear
      name: "BWT Clear"
    illuminance:
      id: bwt_illuminance
      name: "BWT Illuminance"
    color_temperature:
      id: bwt_color_temperature
      name: "BWT Color Temperature"
    gain: 60x
    glass_attenuation_factor: 5.0
    integration_time: 614ms
    update_interval: 10s

  - platform: wifi_signal
    name: "WiFi Signal Sensor"
    update_interval: 60s

text_sensor:
  - platform: wifi_info
    ip_address:
      name: IP Address
    ssid:
      name: Connected SSID
    bssid:
      name: Connected BSSID
    mac_address:
      name: Mac Wifi Address
    # scan_results:
    #   name: Latest Scan Results

  - platform: version
    name: "ESPHome Version"

  - platform: template
    name: "BWT State"
    lambda: |-
      if (id(bwt_blue).state > id(bwt_green).state  && id(bwt_blue).state > id(bwt_red).state) {
        return {"Normal"};
      } else if (id(bwt_green).state > id(bwt_red).state  && id(bwt_green).state > id(bwt_blue).state) {
        return {"Regeneration"};
      } else if (id(bwt_red).state > id(bwt_blue).state && id(bwt_red).state > id(bwt_green).state) {
        return {"Error"};
      } else {
        return {"Unknown"};
      }
    update_interval: 5s

